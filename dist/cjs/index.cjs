"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("fs"),s=require("lodash"),r=require("path"),t=require("dotenv"),i=require("events"),o=require("telegram"),n=require("telegram/extensions/index.js"),a=require("telegram/sessions/index.js");function u(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var d=u(e),l=u(s),m=u(r),c=u(t),f=u(i);c.default.config();const p=new n.Logger,q=new f.default,h=()=>new Promise((e=>{l.default.isEmpty(q.listeners("RequiresPhoneNumber"))&&(p.error("You need to set a listener on 'RequiresPhoneNumber' event"),process.exit(1)),q.emit("RequiresPhoneNumber",(s=>{p.info(`Phone number is '${s}'`),e(s)}))})),v=e=>new Promise((s=>{p.info("You will receive phone code via "+(e?"App":"SMS")),l.default.isEmpty(q.listeners("RequiresPhoneCode"))&&(p.error("You need to set a listener on 'RequiresPhoneCode' event"),process.exit(1)),q.emit("RequiresPhoneCode",(e=>{s(e)}))})),P=e=>new Promise((s=>{p.info(`The hint for your password is '${e}'`),l.default.isEmpty(q.listeners("RequiresPassword"))&&(p.error("You need to set a listener on 'RequiresPassword' event"),process.exit(1)),q.emit("RequiresPassword",(e=>{s(e)}))})),S=()=>new Promise((e=>{l.default.isEmpty(q.listeners("RequiresFirstAndLastNames"))&&(p.error("You need to set a listener on 'RequiresFirstAndLastNames' event"),process.exit(1)),q.emit("RequiresFirstAndLastNames",(([s,r])=>{p.info(`First name is '${s}'`),p.info(`Last name is '${r}'`),e([s,r])}))})),w=({message:e})=>{p.error(e),process.exit(1)};exports.eventEmitter=q,exports.startSession=({apiId:e,apiHash:s,forceSMS:r=!1}={})=>{try{const t=m.default.resolve(".ptl.session"),i=new a.StringSession(d.default.existsSync(t)?d.default.readFileSync(t,"utf8"):process.env.API_SESSION||""),n=new o.TelegramClient(i,l.default.toNumber(e||process.env.API_ID),l.default.toString(s||process.env.API_HASH));return n.start({phoneNumber:h,phoneCode:v,password:P,firstAndLastNames:S,onError:w,forceSMS:r}).then((()=>d.default.promises.writeFile(t,n.session.save()))).then((()=>(p.info("Successfully connected and save session"),n.addEventHandler((e=>{q.emit(e.className,e)})),q))).catch((({message:e})=>{p.error(e),process.exit(1)}))}catch({message:e}){p.error(e),process.exit(1)}};