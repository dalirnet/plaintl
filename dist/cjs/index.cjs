"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("fs"),r=require("lodash"),s=require("path"),t=require("events"),i=require("fs/promises"),n=require("telegram"),o=require("envfile"),a=require("telegram/extensions/index.js"),u=require("telegram/sessions/index.js");function d(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var l=d(e),m=d(r),f=d(s),c=d(t),p=d(i);const q=e=>m.default.trim(m.default.toString(e),["'",'"']),h=f.default.resolve("./.env"),v=o.parse(l.default.existsSync(h)?l.default.readFileSync(h):""),P=new u.StringSession(q(v.SESSION||"")),S=m.default.toNumber(q(v.API_ID)),w=q(v.API_HASH),x=new c.default,g=new a.Logger,y=()=>new Promise((e=>{m.default.isEmpty(x.listeners("RequiresPhoneNumber"))&&(g.error("You need to set a listener on 'RequiresPhoneNumber' event"),process.exit(1)),x.emit("RequiresPhoneNumber",(r=>{g.info(`Phone number is '${r}'`),e(r)}))})),N=e=>new Promise((r=>{g.info("You will receive phone code via "+(e?"App":"SMS")),m.default.isEmpty(x.listeners("RequiresPhoneCode"))&&(g.error("You need to set a listener on 'RequiresPhoneCode' event"),process.exit(1)),x.emit("RequiresPhoneCode",(e=>{r(e)}))})),R=e=>new Promise((r=>{g.info(`The hint for your password is '${e}'`),m.default.isEmpty(x.listeners("RequiresPassword"))&&(g.error("You need to set a listener on 'RequiresPassword' event"),process.exit(1)),x.emit("RequiresPassword",(e=>{r(e)}))})),E=()=>new Promise((e=>{m.default.isEmpty(x.listeners("RequiresFirstAndLastNames"))&&(g.error("You need to set a listener on 'RequiresFirstAndLastNames' event"),process.exit(1)),x.emit("RequiresFirstAndLastNames",(([r,s])=>{g.info(`First name is '${r}'`),g.info(`Last name is '${s}'`),e([r,s])}))})),b=({message:e})=>{g.error(e),process.exit(1)};exports.eventEmitter=x,exports.start=(e=!1)=>{try{const r=new n.TelegramClient(P,S,w);return r.start({phoneNumber:y,phoneCode:N,password:R,firstAndLastNames:E,onError:b,forceSMS:e}).then((()=>p.default.writeFile(h,o.stringify({...v,SESSION:r.session.save()})))).then((()=>{g.info("Modified env file for next usage"),g.info("Successfully connected")})).then((()=>{r.addEventHandler((e=>{x.emit(e.className,e)}))})).then((()=>x)).catch((({message:e})=>{g.error(e),process.exit(1)}))}catch({message:e}){g.error(e),process.exit(1)}};